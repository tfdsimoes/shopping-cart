package xyz.lana.lanaserver.mapper;

import org.junit.jupiter.api.Test;
import xyz.lana.lanaserver.dto.CartProductDTO;
import xyz.lana.lanaserver.entity.CartProduct;

import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CartProductMapperTest {

    /**
     * Generates a random CartProduct
     *
     * @return Object generated
     */
    public static CartProduct buildProductCart() {
        return new CartProduct(UUID.randomUUID().toString(), ThreadLocalRandom.current().nextInt(0, 10));

    }

    /**
     * Assert the objects have the same value after the mapping
     *
     * @param cartProduct    {@link CartProduct} Original object from cart
     * @param cartProductDTO {@link CartProductDTO} Objected generated by the mapper
     */
    public static void assertCartProductWithCartProductDTO(CartProduct cartProduct, CartProductDTO cartProductDTO) {
        assertEquals(cartProduct.getId(), cartProductDTO.getId(), "Id is not equal");
        assertEquals(cartProduct.getProductId(), cartProductDTO.getProductId(), "Product id is not equal");
        assertEquals(cartProduct.getQuantity(), cartProductDTO.getQuantity(), "Quantity is not equal");
    }

    @Test
    public void CartProductToCartProductDTO() {
        CartProduct cartProduct1 = buildProductCart();
        CartProduct cartProduct2 = buildProductCart();

        CartProductDTO cartProductDTO1 = CartProductMapper.INSTANCE.CartProductToCartProductDTO(cartProduct1);
        CartProductDTO cartProductDTO2 = CartProductMapper.INSTANCE.CartProductToCartProductDTO(cartProduct2);

        assertCartProductWithCartProductDTO(cartProduct1, cartProductDTO1);
        assertCartProductWithCartProductDTO(cartProduct2, cartProductDTO2);
    }
}